/* DO NOT EDIT THIS FILE - it is machine generated */
#include <stdio.h>
#include <string.h>

#include "com_jnitest_jni_JniTest.h"

using namespace std;

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testVoid
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_jnitest_jni_JniTest_testVoid
  (JNIEnv *env, jobject jobj) {
//    LOGI_JniSCS("start native sendAudioData");

    //jobj对象就是java层调用JniTest的对象，那个类调用JniTest对应的jobj就是那个对象
    jclass javaClass = env->GetObjectClass(jobj);
    if (javaClass == 0) {
//        LOGI_JniSCS("Unable to find class: " + className);
        return;
    }

    //获取要回调的方法ID
    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestVoid", "()V");
    if (javaCallbackId == NULL) {
//        LOGI_JniSCS("Unable to find method:onProgressCallBack");
        return;
    }
    //执行回调,注意第一个参数是jobj，不是javaClass, CallVoidMethod表示不获取返回值，需要返回值用其他方法
    (*env).CallVoidMethod(jobj, javaCallbackId);

    return;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testBoolean
 * Signature: (Z)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jnitest_jni_JniTest_testBoolean
  (JNIEnv *env, jobject jobj, jboolean jb) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return false;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestBoolean", "(Z)Z");
    if (javaCallbackId == NULL) {
        return false;
    }

    jboolean arg1 = true;
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return true;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testChar
 * Signature: (C)C
 */
JNIEXPORT jchar JNICALL Java_com_jnitest_jni_JniTest_testChar
  (JNIEnv *env, jobject jobj, jchar jc) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return '1';
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestChar", "(C)C");
    if (javaCallbackId == NULL) {
        return '1';
    }

    jchar arg1 = '3';
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return '0';
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testByte
 * Signature: (B)B
 */
JNIEXPORT jbyte JNICALL Java_com_jnitest_jni_JniTest_testByte
  (JNIEnv *env, jobject jobj, jbyte jbt) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return (jbyte)1;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestByte", "(B)B");
    if (javaCallbackId == NULL) {
        return (jbyte)1;
    }

    jbyte arg1 = 3;
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return (jbyte)0;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testShort
 * Signature: (S)S
 */
JNIEXPORT jshort JNICALL Java_com_jnitest_jni_JniTest_testShort
  (JNIEnv *env, jobject jobj, jshort jsh) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return (jshort)1;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestShort", "(S)S");
    if (javaCallbackId == NULL) {
        return (jshort)1;
    }

    jshort arg1 = 3;
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return (jshort)0;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testInt
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_jnitest_jni_JniTest_testInt
  (JNIEnv *env, jobject jobj, jint ji) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return 1;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestInt", "(I)I");
    if (javaCallbackId == NULL) {
        return 1;
    }

    jint arg1 = 3;
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return 0;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testLong
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_jnitest_jni_JniTest_testLong
  (JNIEnv *env, jobject jobj, jlong jl) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return (jlong)1;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestLong", "(J)J");
    if (javaCallbackId == NULL) {
        return (jlong)1;
    }

    jlong arg1 = 3;
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return 0;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testFloat
 * Signature: (F)F
 */
JNIEXPORT jfloat JNICALL Java_com_jnitest_jni_JniTest_testFloat
  (JNIEnv *env, jobject jobj, jfloat jf) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return (jfloat)1.0;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestFloat", "(F)F");
    if (javaCallbackId == NULL) {
        return (jfloat)1.0;
    }

    jfloat arg1 = 3.0;
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return 0.0;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testDouble
 * Signature: (D)D
 */
JNIEXPORT jdouble JNICALL Java_com_jnitest_jni_JniTest_testDouble
  (JNIEnv *env, jobject jobj, jdouble jd) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return (jdouble)1.00;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestDouble", "(D)D");
    if (javaCallbackId == NULL) {
        return (jdouble)1.00;
    }

    jdouble arg1 = 3.00;
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return 0.00;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testString
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_jnitest_jni_JniTest_testString
  (JNIEnv *env, jobject jobj, jstring jstr) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return env->NewStringUTF("1");
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestString", "(Ljava/lang/String;)Ljava/lang/String;");
    if (javaCallbackId == NULL) {
        return env->NewStringUTF("1");
    }

    jstring arg1 = env->NewStringUTF("3");
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return env->NewStringUTF("0");
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testByteArray
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_jnitest_jni_JniTest_testByteArray
  (JNIEnv *env, jobject jobj, jbyteArray jbtArray) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return NULL;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestByteArray", "([B)[B");
    if (javaCallbackId == NULL) {
        return NULL;
    }

    jbyteArray arg1 = env->NewByteArray(3);
    signed char chs[3] = {1, 2, 3};
    jbyte* jbs = chs;
    env->SetByteArrayRegion(arg1, 0, 3, jbs);
    (*env).CallVoidMethod(jobj, javaCallbackId, arg1);
    return arg1;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testMixed
 * Signature: ([BZLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jnitest_jni_JniTest_testMixed
  (JNIEnv *env, jobject jobj, jbyteArray jbtArray, jboolean jb, jstring jstr) {
    jclass javaClass = (*env).FindClass("com/jnitest/jni/JniTest");
    if (javaClass == 0) {
        return false;
    }

    jmethodID javaCallbackId = (*env).GetMethodID(javaClass, "onTestMixed", "([BZLjava/lang/String;)[B");
    if (javaCallbackId == NULL) {
        return false;
    }

    jbyteArray arg1 = env->NewByteArray(3);
    signed char chs[3] = {1, 2, 3};
    jbyte* jbs = chs;
    env->SetByteArrayRegion(arg1, 0, 3, jbs);

    jboolean arg2 = true;
    jstring arg3 = (*env).NewStringUTF("3");

    (*env).CallVoidMethod(jobj, javaCallbackId, arg1, arg2, arg3);

    return true;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testOnCalledOne
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_jnitest_jni_JniTest_testOnCalledOne
  (JNIEnv *env, jobject jobj) {
    jclass javaClass1 = (*env).FindClass("com/jnitest/jni/OnCalledOne");
    jmethodID javaCallbackId1 = (*env).GetMethodID(javaClass1, "onCallback", "()V");
    env->CallVoidMethod(jobj, javaCallbackId1);
    return;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testOnCalledTwo
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_jnitest_jni_JniTest_testOnCalledTwo
  (JNIEnv *env, jobject jobj) {
    jclass javaClass2 = (*env).FindClass("com/jnitest/OnCalledTwo");
    jmethodID javaCallbackId2 = (*env).GetMethodID(javaClass2, "onCallback", "()V");

    env->CallVoidMethod(jobj, javaCallbackId2);
    return;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testByteArrayReference1
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_jnitest_jni_JniTest_testByteArrayReference1
  (JNIEnv *env, jobject jobj, jbyteArray jbtArray) {
    jclass javaClass = env->GetObjectClass(jobj);
    if (javaClass == 0) {
        return NULL;
    }

    jint oldLen = env->GetArrayLength(jbtArray);
    jbyte* resultBytes = env->GetByteArrayElements(jbtArray, 0);

    resultBytes[1] = 0;

    //env->ReleaseByteArrayElements(jbtArray, resultBytes, JNI_COMMIT);

    jbyteArray resultByteArray = env->NewByteArray(oldLen);
    env->SetByteArrayRegion(resultByteArray, 0, oldLen, resultBytes);

    return resultByteArray;
  }

/*
 * Class:     com_jnitest_jni_JniTest
 * Method:    testByteArrayReference2
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_jnitest_jni_JniTest_testByteArrayReference2
  (JNIEnv *env, jobject jobj, jbyteArray jbtArray) {
    jclass javaClass = env->GetObjectClass(jobj);
    if (javaClass == 0) {
        return NULL;
    }

    jint oldLen = env->GetArrayLength(jbtArray);
    jbyte* resultBytes = env->GetByteArrayElements(jbtArray, 0);

    resultBytes[1] = 0;

    env->ReleaseByteArrayElements(jbtArray, resultBytes, JNI_COMMIT);

    jbyteArray resultByteArray = env->NewByteArray(oldLen);
    env->SetByteArrayRegion(resultByteArray, 0, oldLen, resultBytes);

    return resultByteArray;
  }

